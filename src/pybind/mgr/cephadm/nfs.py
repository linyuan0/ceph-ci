import logging

from typing import Dict, Optional

import cephadm
from orchestrator import OrchestratorError

logger = logging.getLogger(__name__)

class NFSGanesha(object):
    def __init__(self,
                 mgr,
                 daemon_id,
                 pool,
                 namespace=None):
        # type: (cephadm.CephadmOrchestrator, str, str, Optional[str]) -> None
        self.daemon_type = 'nfs'
        self.daemon_id = daemon_id

        self.mgr = mgr

        # rados pool config
        self.pool = pool
        self.namespace = namespace

    def get_daemon_name(self):
        # type: () -> str
        return '%s.%s' % (self.daemon_type, self.daemon_id)

    def get_rados_user(self):
        # type: () -> str
        return self.get_daemon_name()

    def get_rados_config_name(self):
        # type: () -> str
        return 'conf-' + self.get_daemon_name()

    def get_rados_config_url(self):
        # type: () -> str
        url = 'rados://' + self.pool + '/'
        if self.namespace:
            url += self.namespace + '/'
        url += self.get_rados_config_name()
        return url

    def create_keyring(self):
        # type: () -> str
        entity = cephadm.name_to_config_section(self.get_rados_user())

        osd_caps='allow rw pool=%s' % (self.pool)
        if self.namespace:
            osd_caps='%s namespace=%s' % (osd_caps, self.namespace)

        logger.info('Create keyring: %s' % entity)
        ret, keyring, err = self.mgr.mon_command({
            'prefix': 'auth get-or-create',
            'entity': entity,
            'caps': ['mon', 'allow r',
                     'osd', osd_caps,
                     'mds', 'allow rw'],
        })

        if ret != 0:
            raise OrchestratorError('Unable to create keyring: %s' % (entity))

        return keyring

    def create_rados_config_obj(self):
        # type: () -> None
        obj = self.get_rados_config_name()
        logger.info('Create rados config object: %s' % obj)
        with self.mgr.rados.open_ioctx(self.pool) as ioctx:
            if self.namespace:
                ioctx.set_namespace(self.namespace)
            ioctx.write_full(obj, ''.encode('utf-8'))

    def get_ganesha_conf(self):
        # type: () -> str
        return '''# generated by cephadm
RADOS_URLS {{
        UserId = "{user}";
}}

%url    {url}
'''.format(user=self.get_rados_user(),
           url=self.get_rados_config_url())

    def get_cephadm_config(self):
        # type: () -> Dict
        config = {'pool' : self.pool} # type: Dict
        if self.namespace:
            config['namespace'] = self.namespace
        config['files'] = {
            'ganesha.conf' : self.get_ganesha_conf(),
        }
        logger.debug('Generated cephadm config-json: %s' % config)
        return config
